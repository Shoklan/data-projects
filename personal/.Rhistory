findEmptyRows(1, data)
data[1, ]
is.na( data[1, ])
sum( is.na( data[1, ]))
findEmptyRows <- function(.x, .i ){
sum( is.na( .x[.i, ])) == 8
}
for( i in 1:nrow( data )){
boolVector[i] <- findEmptyRows(i, data)
}
sum( is.na( data[1, ])) == 8
.x <- data
.i <- 1
sum( is.na( .x[.i, ])) == 8
for( i in 1:nrow( data )){
boolVector[i] <- findEmptyRows(data, i)
}
which( boolVector == TRUE)
deleteIndexes <- which( boolVector == TRUE)
data <- data[-deleteIndexes,]
head( data )
map( data, function(.x){ sum( is.na( .x )) })
tail( data )
grep( "Sales of motor vehicles", data$X1)
grep( "Sales of motor vehicles", data$X0)
grep( "Sales of motor vehicles", data$Location)
bottomIndex <- grep( "Sales of motor vehicles", data$Location)
c(bottomIndex-1, bottomIndex)
data <- data[-bottomIndex]
data
tail( data )
data <- data[-bottomIndex,]
tail( data )
c(bottomIndex-1:nrow( data ))
c((bottomIndex-1):nrow( data ))
bottomIndex <- c((bottomIndex-1):nrow( data ))
data <- data[-bottomIndex,]
tail( data )
# Author: Collin Mitchell
# Date: 2017/10/04
# Purpose: To be an example of Shiny.
##- Libraries ##
library( rvest )
library( purrr )
library( stringr )
# library( rio )
library( xlsx )
##-- Variables ##
# url to reach out to
baseurl <- "http://tax.utah.gov/salestax/rate/%sq%ssimple.xls"
# static url components for period.
quarterStrings<- sprintf( "%02d", sort( c( c(9, 9, 9), rep( 10:17, times = 4))))
quarterCycle<- rep(1:4, times = 9 )[-1]
# compile URLs
generatedURLs<- sprintf( baseurl, quarterStrings, quarterCycle )
# collect file names
filenames<- unlist( map( str_split(generatedURLs, "/"), 6))
# columns to collect
dataColumnIndexes <- c(1, 3:9)
columnHeaders <- c("Location", "CityCode", "SalesAndUse", "Food", "TransientRoom", "Restaurant", "Leasing", "ResortTax")
# create container for boolean values
boolVector <- logical(nrow( data ))
##- Functions ##
findEmptyRows <- function(.x, .i ){
sum( is.na( .x[.i, ])) == 8
}
##- Main ##
# download all the data
walk2( .x = generatedURLs, .y = filenames, .f = download.file, mode = "wb" )
# data <- import( filenames[1])
data <- read.xlsx(filenames[1], sheetIndex = 1, startRow = 12,
header = FALSE, colIndex = dataColumnIndexes)
# fix column names
colnames( data ) <- columnHeaders
# find empty rows
for( i in 1:nrow( data )){
boolVector[i] <- findEmptyRows(data, i)
}
deleteIndexes <- which( boolVector == TRUE)
# delete them
data <- data[-deleteIndexes,]
# find description text at bottom and delete
bottomIndex <- grep( "Sales of motor vehicles", data$Location)
bottomIndex <- c((bottomIndex-1):nrow( data ))
data <- data[-bottomIndex,]
str( data )
coord_map()
library( ggplot2 )
coord_map()
?map_data
map_data("Utah", region = data$Location)
install.packages("maps")
library( maps)
map_data("Utah", region = data$Location)
map_data("utah", region = data$Location)
temp <- map_data("county")
str( temp )
temp$region == "utah"
temp$region['utah']
tempTwo <- subset( temp, region == "utah")
tempTwo
unique( tempTwo$subregion )
head( data )
library( rvest )
library( purrr )
url <- "https://topsmarkets.sumtotalsystems.com/SS61/"
## -- Functions -- ##
# Return a session object
getSession<- function( urlTarget ){
sessionObject <- html_session( urlTarget )
sessionObject
}
# return completed session information to use.
saveCredentials <- function(username, password, session){
# credentials
user = username
pass = password
# get session
# sessionForm<- getSession( urlTarget )
sessionForm<- html_form( session )[[1]]
# update the form information
completeForm<- set_values( sessionForm, "loginId" = user, "password" = pass)
completeForm
}
loginSession <- getSession( urlTarget )
creds <- saveCredentials("770023379", "Idontcare1", loginSession)
playOutput <- loginSession %>%
submit_form(creds) %>%
# html_attr( ".intraModuleNavTab a")
# follow_link(xpath = ".intraModuleNavTab a") %>%
html_nodes('a') %>%
walk( function(.x){ print( .x )})
library( rvest )
library( purrr )
url <- "https://topsmarkets.sumtotalsystems.com/SS61/"
getSession<- function( urlTarget ){
sessionObject <- html_session( urlTarget )
sessionObject
}
saveCredentials <- function(username, password, session){
# credentials
user = username
pass = password
# get session
# sessionForm<- getSession( urlTarget )
sessionForm<- html_form( session )[[1]]
# update the form information
completeForm<- set_values( sessionForm, "loginId" = user, "password" = pass)
completeForm
}
loginSession <- getSession( urlTarget )
loginSession <- getSession( url )
creds <- saveCredentials("770023379", "Idontcare1", loginSession)
loginSession %>%
submit_form(creds) %>%
# html_attr( ".intraModuleNavTab a")
# follow_link(xpath = ".intraModuleNavTab a") %>%
html_nodes('a')
loginSession %>%
submit_form(creds) %>%
follow_link(css = ".intraModuleNavTab a") %>%
html_nodes('a')
username = "770023379"
password = "Idontcare1"
dir()
setwd('~/Code/data-projects/personal/')
dir()
?save
save( username, password, file = "__data/credentials.R")
ls
dir()
load( "__data/credentials.R")
source('~/Code/topspaystub.R')
loginSession <- getSession( URL )
load( "__data/credentials.R")
URL <- "https://topsmarkets.sumtotalsystems.com/SS61/"
save( URL, password, username, file = "__data/credentials.R")
load( "__data/credentials.R")
# Return a session object
getSession<- function( urlTarget ){
sessionObject <- html_session( urlTarget )
sessionObject
}
# save credentials to a usable object
saveCredentials <- function(session, username, password){
# credentials
user = username
pass = password
# extract sesson form data.
sessionForm<- html_form( session )[[1]]
# update the form information
completeForm<- set_values( sessionForm, "loginId" = user, "password" = pass)
completeForm
}
loginSession <- getSession( URL )
creds <- saveCredentials( loginSession, username, password)
temp
temp <- loginSession %>%
submit_form(creds) %>%
# move to personal page
follow_link( css = ".intraModuleNavTab a") %>%
# move to pay information tabular
follow_link( "Pay Information") %>%
# scrape paycheck details
html_node( "#ViewPayInfo" )
map( temp, str_replace_all, pattern = "[\\r|\\n|\\t]", replace = "")
temp
tempSlice <- xml_contents( temp )[2] %>% xml_contents()
tempSlice
indexes <- c(5, 7, 9, 12 )
tempSlice[ indexes ]
tempSlice[ indexes ]
tempSlice<- tempSlice[ indexes ]
tempSlice
tempSlice[1]
tempSlice[[1]]
tempSlice[1]
tempSlice[1] %>% xml_contents()
tempSlice[[1]]
tempSlice[1]
?xml
tempSlice[1] %>% html_text()
tempSlice[1] %>% html_text() %>% str_replace_all(., "[\\r|\\n|\\t|NA]", "")
tempSlice[1] %>% html_text() %>% str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[2] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempF <- function(.x){
.x %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
}
map( temp, tempF)
tempSlice <- xml_contents( temp )[2] %>% xml_contents()
map( tempSlice, tempF)
tempSlice[1] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
length( tempSlice)
tempSlice[2] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[3] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[1]
tempSlice[2]
tempSlice[3]
tempSlice[4]
tempSlice[5]
tempSlice[6]
tempSlice[7]
tempSlice[8]
tempSlice[9]
tempSlice[9] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[9] %>%
html_text()
tempSlice[9] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[10] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[11] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[12] %>%
html_text() %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice[12] %>%
html_text()
tempSlice[12]
tempSlice[12] %>% html_table(header = FALSE, fill = TRUE)
tempTB-tempSlice[12] %>% html_table(header = FALSE, fill = TRUE)
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE)
dim( tempTB)
tempTB
tempTB[1:2, 5]
tempTB[1, 5]
tempTB[1:2]
class( tempTB )
tempTB <- as.data.frame( tempTB )
tempTB
dim( tempTB)
tail( tempTB )[,5]
tail( tempTB, 10 )[,5]
tail( tempTB, 10 )[1:10,5]
tail( tempTB )
tempTB<- tempSlice[12] %>% html_table(header = FALSE)
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE)
dim( tempTB )
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()
dim( tempTB )
na.omit(tempTB)
tempTB[25:31, ]
map( tmpTB, unique)
map( tempTB, unique)
class( tempTB)
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE)
class( tempTB)
map( tempTB, unique)
library( purrr)
library( rvest )
library( stringr )
##-- Constants
# load private data
load( "__data/credentials.R")
##-- Functions
# Return a session object
getSession<- function( urlTarget ){
sessionObject <- html_session( urlTarget )
sessionObject
}
# save credentials to a usable object
saveCredentials <- function(session, username, password){
# credentials
user = username
pass = password
# extract sesson form data.
sessionForm<- html_form( session )[[1]]
# update the form information
completeForm<- set_values( sessionForm, "loginId" = user, "password" = pass)
completeForm
}
##-- MAIN
# colelect a session
loginSession <- getSession( URL )
# collect the credential'd session to login.
creds <- saveCredentials( loginSession, username, password)
# collect this payment period information.
temp <- loginSession %>%
submit_form(creds) %>%
# move to personal page
follow_link( css = ".intraModuleNavTab a") %>%
# move to pay information tabular
follow_link( "Pay Information") %>%
# scrape paycheck details
html_node( "#ViewPayInfo" )
temp
map( temp, str_replace_all, pattern = "[\\r|\\n|\\t]", replace = "")
xml_contents( temp )[2] %>% xml_contents()
xml_contents( temp )[2] %>% xml_text(trim = TRUE)
tempSlice <- xml_contents( temp )[2] %>% xml_contents()
tempSlice
map( tempSlice, xml_contents)
map( tempSlice, xml_text)
class( tempSlice)
?xml_text
tempSlice[1]
tempSlice[1] %>% xml_text()
tempSlice[2] %>% xml_text()
nrow( tempSlice)
length( tempSlice)
map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text()}
)
map( 1:length( tempSlice ), function(.x){ tempSlice[.x] })
map( 1:length( tempSlice ), function(.x){ print( .x ) })
library( purrr)
library( rvest )
library( stringr )
map( 1:length( tempSlice ), function(.x){ print( .x ) })
?map
map( 1:10, print)
library( purrr)
map( 1:10, print)
purrr::map( 1:10, print)
library( purrr )
map
map <- purrr::map
map( 1:10, print)
map( 1:length( tempSlice ), function(.x){ print( .x ) })
map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text()}
)
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text()})
extractedContents
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text()}))
extractedContents
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text(trim = TRUE)}))
extractedContents
indexes <- c( 9, 12 )
tempSlice<- tempSlice[ indexes ]
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text(trim = TRUE)}))
extractedContents
tempSlice %>%
str_replace_all(., "[\\r|\\n|\\t]", "")
tempSlice %>%
str_replace_all( "[\r|\n|\t]", " ")
tempSlice
tempSlice <- xml_contents( temp )[2] %>% xml_contents()
indexes <- c( 9, 12 )
tempSlice<- tempSlice[ indexes ]
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text(trim = TRUE)}))
extractedContents
class( extractedContents)
extractedContents %>%
str_replace_all( "[\r|\n|\t]", " ")
extractedContents %>%
str_replace_all( "[\r|\n|\t]+", " ")
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()
tempSlice <- xml_contents( temp )[2] %>% xml_contents()
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()
tempTB
indexes <- c( 9, 12 )
tempSlice<- tempSlice[ indexes ]
tempTB<- tempSlice[12] %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()
tempTB<- tempSlice %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()
tempTB<- tempSlice[1] %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()
tempTB
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% xml_text(trim = TRUE)}))
extractedContents %>%
str_replace_all( "[\r|\n|\t]+", " ")
tempSlice[1]
tempSlice[1] %>% xml_text
tempSlice[1] %>% xml_text()
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table()}))
extractedContents <- unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)}))
extractedContents
dim( extractedContents)
length( extractedContents)
tempSlice
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)})
length( extractedContents)
head( extractedContents[1] )
extractedTemp <- extractedContents %>%
str_replace_all( "[\r|\n|\t]+", " ")
map( extractedTemp, dim)
map( extractedTemp, length)
map( extractedTemp, unlist)
length( map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)}))
length( unlist(map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)})))
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)})
extractedTemp
tempSlice <- xml_contents( temp )[2] %>% xml_contents()
indexes <- c( 9, 12 )
tempSlice<- tempSlice[ indexes ]
map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)})
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)})
head( extractedContents)
unlist( extractedContents)
unlist( unlist( extractedContents))
class( unlist( unlist( extractedContents))
)
class( unlist( extractedContents))
class( extractedContents)
extracteddContents
extractedContents
str( extractedContents )
part1 <- extractedContents[1]
part1
class( part1 )
unlist( part1 )
class( unlist( part1 ) )
as.data.frame( part1)
extractedTemp <- extractedContents %>%
str_replace_all( "[\r|\n|\t]+", " ")
extractedTemp
extractedTemp <- extractedContents %>%
map( str_replace_all, pattern = "[\r|\n|\t]+", replacement = " ")
extractedTemp
class( extractedContents[[1]])
class( extractedContents[[2]])
extractedContents[[2]]
map( extractedContents, as.data.table)
map( extractedContents, as.data.frame)
unlist( map( extractedContents, as.data.frame))
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE)})
extractedContents[[1]]
class( extractedContents[[1]])
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(fill = TRUE) %>% as.data.frame()})
extractedContents[[1]]
class( extractedContents[[1]])
class( extractedContents[[2]])
extractedContents[[2]]
View( extractedContents[[2]])
?html_table
extractedContents[[2]][3:13, c(1:3, 6, 7)]
earningsBlock <- extractedContents[[2]][3:13, c(1:3, 6, 7)]
earningsBlock[1,]
colnames( earningsBlock) <- earningsBlock[1,]
earningsBlock
earningsBlock <- earningsBlock[-1,]
earningsBlock
earningsBlock <- extractedContents[[2]][3:14, c(1:3, 6, 7)]
colnames( earningsBlock) <- earningsBlock[1,]
earningsBlock <- earningsBlock[-1,]
earningsBlock
earningsBlock[14, c(2,3)] <- ""
earningsBlock
earningsBlock
earningsBlock
extractedContents <- map( 1:length( tempSlice ), function(.x){ tempSlice[.x] %>% html_table(header = FALSE, fill = TRUE) %>% as.data.frame()})
# earnings block
earningsBlock <- extractedContents[[2]][3:14, c(1:3, 6, 7)]
colnames( earningsBlock) <- earningsBlock[1,]
earningsBlock <- earningsBlock[-1,]
earningsBlock
earningsBlock[14, c(2,3)]
earningsBlock[14, ]
earningsBlock
earningsBlock[,1]
nrow( earningsBlock)
earningsBlock[11, c(2,3)]
earningsBlock[11, c(2,3)] <- ""
earningsBlock
rownames(earningsBlock)
rownames(earningsBlock) <- NA
rownames(earningsBlock) <- rep(NA, times = nrow( earningsBlock))
?rownames
rownames(earningsBlock) <- NULL
earningsBlock
